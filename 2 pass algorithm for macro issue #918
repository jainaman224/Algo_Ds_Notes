#include<bits/stdc++.h>
struct table
{
	int mntc2,mdtc2;  //fields required for mnt table
	char mname[20];
}mnt[20];

char ala[10];
int b;

struct table2
{
	int mdtc3;       //fields required for mdt table
	char mname[8];
	char arg[8];
}mdt[20];

int mdtc=1,mntc=1,countmn,countmd;

void pass1()             Pass 1 is used to recognize macro definition and save it
{
	void pass2();
	void display1();
	FILE *f,*o,*m;
	int flag1=1,flag2=1,fl=1,i,j,k,index;
	char line[50],word[20];
	o=fopen("outputfilepass1.txt","w");
	f=fopen("inputfile.txt","r");
//	m=fopen("opfinal.txt","w");
	while(flag1==1)                     
	{
	
		fgets(line,50,f);
		i=0;
		j=0;
		while(line[i]!='\0')
		{
			word[j]=line[i];
			j++;
			i++;
		}
		word[j]='\0';
		if(word[0]=='E' && word[1]=='N' && word[2]=='D') // if end is encountered then copy in output file and proceed to pass 2
		{
			flag1=0;
			countmn=mntc-1;
			countmd=mdtc-1;
			fputs(word,o);
		//	fputs("\n",o);
			fclose(f);
			fclose(o);
			display1();
			pass2();
			
		}
		else
		{  
       /*if word MACRO is encountered then read next line ,fill the entry in mdt,mnt,mdtc,ala. Next read next line and do 
       substitutions from ala. Else if macro is not encountered ,copy in output file and go back to outermost while loop*/ 
        
			if(word[0]=='M' && word[1]=='A' && word[2]=='C' && word[3]=='R' && word[4]=='O')
			{
				fgets(line,50,f);
				i=0;
				j=0;
				while(line[i]!=32)
				{
					mdt[mdtc].mname[j]=line[i];
					mnt[mntc].mname[j]=line[i];
					j++;
					i++;
				}
				mdt[mdtc].mname[j]='\0';
				mnt[mntc].mname[j]='\0';
				mdt[mdtc].mdtc3=mdtc;
				b=mdtc;
				i=i+1;
				j=0;
				while(line[i]!='\0')
				{
					mdt[mdtc].arg[j]=line[i];
					j++;
					i++;
				}
				mdt[mdtc].arg[j]='\0';
				mnt[mntc].mntc2=mntc;
				mnt[mntc].mdtc2=mdtc;
			
				
				
				mdtc++;
				mntc++;
				i=0;
				j=0;
				while(mdt[b].arg[i]!='\0')  //ala prepared
				{
					if(mdt[b].arg[i]=='&')
					{
					
						//ala[j][0]='&';
						ala[j]=mdt[b].arg[i+1];
						j=j+1;
					}
					i++;
				}
				flag2=1;
				while(flag2==1)
				{
				
					fgets(line,50,f);
					i=0;
					j=0;
					while(line[i]!='\0')
					{
						word[j]=line[i];
						j++;
						i++;
					}
					word[j]='\0';
						i=0;
						j=0;
					while(line[i]!=32)
					{
						mdt[mdtc].mname[j]=line[i];
						j++;
						i++;
					}
					mdt[mdtc].mname[j]='\0';
					mdt[mdtc].mdtc3=mdtc;
					if(line[i]!='\0')
						i=i+1;
					j=0;
					k=0;
					fl=1;
					while(line[i]!='\0')
					{
						fl=1;
						if(line[i]=='&')
						{
							mdt[mdtc].arg[j]='#';
							k=0;
							while(fl)
							{
								if(ala[k]==line[i+1])
								{
									index=k;
									fl=0;
								}
								k++;	
							}
							mdt[mdtc].arg[j+1]=index+'0';
							//printf("%d   ^^   %c\n",index,mdt[mdtc].arg[j+1]);
							
							
							
							j=j+2;
							i++;
							
							
						}
						else
						{
							mdt[mdtc].arg[j]=line[i];
							j++;
						}
						i++;
					}
					mdt[mdtc].arg[j]='\0';
					
					mdtc++;
          //if MEND is encountered go back to the entry of outermost while loop else go back to the step after entry in ala
					if((word[0]=='M' && word[1]=='E' && word[2]=='N' && word[3]=='D'))
					{
					    mdt[mdtc-1].arg[0]='\0';
						flag2=0;
					}
					
				}	
			}
			else
			{
				fputs(word,o);
				//fputs("\n",o);
			}
			
			
		}
	 }	
	}

void display1()
{
	int i;
		printf("-------MNT------\n");
	for(i=1;i<=countmn;i++)
	{
		printf(" %d   %d ",mnt[i].mdtc2,mnt[i].mntc2);

		fputs(mnt[i].mname,stdout);
		printf("\n");
				
	}
	printf("------MDT-----\n");
	for(i=1;i<=countmd;i++)
	{
			printf("%d  ",mdt[i].mdtc3);
		fputs(mdt[i].mname,stdout);
		printf("\t");
		fputs(mdt[i].arg,stdout);
		printf("\n");
	
	}
	
}

void pass2() 
{
  //Pass 2 is used to recognize macro call and perform macro expansion.
	/* firstly after reading line from source code, we search mnt for match with operation code. if macro name matching correct,set up
  ala, get line from mdt and substitute arguments from macro call; else write into output file and check for end.if mend, write into
  output file else go back to read next line from source code*/
  FILE *o,*m;
	o=fopen("outputfilepass1.txt","r"); // input of this file is the output of pass 1
	m=fopen("outputfilepass2.txt","w");
	    int i,j,flag=1,sp,found,mdtr,flag2=1,flag1=1,k,l,c;
	    char word[20],line[50],str[10],z;
	    while(flag1)
	    {
		
		fgets(line,50,o);
		i=0;
		j=0;
			while(line[i]!='\0')
		{
			word[j]=line[i];
			if(word[j]==32)
				sp=j;   //space index
			j++;
			i++;
		}
		word[j]='\0';
		 found=0;
		for(i=1;i<mntc;i++)   //macro name matching
		{
			flag=1;
			j=0;
			while(mnt[i].mname[j]!='\0' && flag==1 && word[j]!=32)
			{
				if(word[j]==mnt[i].mname[j])
					j++;
				
					else
						flag=0;
			}
			if(flag==1)
			{
			
				found=1;
				break;
			}
		}
		if(found==1) //its a macro name
		{
			mdtr=mnt[i].mdtc2;
			i=sp+1;
			k=0;
			while(word[i]!='\0')      //ala substituted
			{
				if(word[i]!=',')
				{
					ala[k]=word[i];
					k++;
				}
				i++;
			
			}
			printf("---ALA---\n");
			puts(ala);
			flag2=1;
			while(flag2)
			{
			
				mdtr++;
				j=0;
				while(mdt[mdtr].mname[j]!='\0')
				{
					str[j]=mdt[mdtr].mname[j];
					j++;
				}
				str[j]=' ';
				j++;
				c=0;
				
				while(mdt[mdtr].arg[c]!='\0')  //substitution of arguments from macro call
				{
					if(mdt[mdtr].arg[c]=='#')
					{
						z=mdt[mdtr].arg[c+1];
						k=z-'0';
						//puts(mdt[mdtr].arg);
						//printf("%d ",k);
						str[j]=ala[k];
						j++;
						c++;
						
					}
					else
						{
							str[j]=mdt[mdtr].arg[c];
							j++;
						}
					c++;
				}
				str[j]='\0';
				
				if(str[0]=='M' && str[1]=='E' && str[2]=='N' && str[3]=='D')
					flag2=0;
				else
				{
					fputs(str,m);
					//fputs(mdt[mdtr].arg,m);
				}
			}
			
			
			
		}
		else
		{
				fputs(word,m);
				//fputs("\n",m);
				if(word[0]=='E' && word[1]=='N'&& word[2]=='D')
				{
				
					flag1=0;
					fclose(m);
					fclose(o);
				}
		}
		
}
//sample input
/*MACRO
BQ &x,&y
L 1,&y
ST 1,&x
MEND
MACRO
N &P,&Q,&R
A 1,&P
S 1,&Q
L 1,&R
MEND
START
DA 1,D
KG 2,V
N X,Y,Z
BQ Q,R
DS 1,A
END  */
	
}

void main()
{
	pass1();
}
