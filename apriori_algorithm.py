# -*- coding: utf-8 -*-
"""Apriori Algorithm.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1SySjiSMLMj946YBkfDv9NownvByFsFRg
"""

# Product recommendation using Apriori Algorithm

import math
import pandas as pd
import numpy as np

#  dataset for having transaction having items per transaction
transactionId=[1,2,3,4,5]
min_support=0.5
confidence=0.75
item_purchased=[['bread','chease','egg','juice'],
                ['bread','chease','juice'],
                ['bread','milk','yogurt'],
                ['bread','juice','milk'],
               ['chease','juice','milk']]
df=pd.DataFrame({'transactionId':transactionId,'item_purchased':item_purchased})

# Calculating the unique items and total transactions 
items=set(item for i in range(len(df.item_purchased)) for item in df['item_purchased'][i])
items=list([item] for item in items)
total_transaction=len(transactionId)
print("Total transactions: ",total_transaction,"    items: ",items)

# Calculating the items frequency 
def items_frequency(items,item_table):
    count=0
    for j in range(len(item_table)): 
        a=np.array([i in item_table[j] for i in items ])
        if a.all() == True:
            count+=1
    return count

# calculating the support for items 
def support(freq):
    return float(freq/total_transaction)

# update item list to combine same featured item in a single item list 
def update_item(items):
    update_item_val=[list(set(items[i]+items[j])) for i in range(len(items)+1) for j in range(i+1,len(items))]       
    return update_item_val

# calculate support  at all levels 
def apriori(items):
    df_new=pd.DataFrame(columns=['items','frequency','support'])
    df_list=[]
    while len(df_new) !=2:
        df_new=pd.DataFrame(columns=['items','frequency','support'],index=[])
        for i in range(len(items)):
            current_item=items[i]
            freq=items_frequency(current_item,df.item_purchased)
            supp=support(freq)
            if supp >=min_support: 
                df_new.loc[i]=[current_item,freq,supp]
        print(df_new)
        df_list.append(df_new)
        items= update_item(items)
    return df_list

tables=apriori(items)

# making item and support pair of first table to get individuals support 
table0={str(item_str):support_val for item_str,support_val in zip(tables[0]['items'],tables[0]['support'])}

# calculate confidence 
def confidence(table0,df_new):
    total_conf=[]
    for l in range(0,len(df_new)):
        conf=[df_new[l][2]/table0[str([df_new[l][0][j]])] for j in range(len(df_new[l][0]))]
        for item,conf in zip(df_new[l][0],conf):
            total_conf.append([df_new[l][0],(item,conf)])
    return total_conf

conf=confidence(table0,tables[-1].values)
print("Confidence Table :")
conf

